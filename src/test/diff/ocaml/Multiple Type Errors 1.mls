(*This program processes two lists, one of integers and one of strings, using functions that map and sum the lists. The process_lists function tries to add the results of summing these lists, leading to multiple type errors.*)
let rec map_list f lst =
  match lst with
  | [] -> []
  | x :: xs -> (f x) :: (map_list f xs) ;;
//│ map_list: ('a -> 'b) -> list['a] -> list['b]

let rec sum_list lst =
  match lst with
  | [] -> 0
  | x :: xs -> x + (sum_list xs) ;;
//│ sum_list: list[int] -> int

let process_lists lst1 lst2 =
  let mapped_lst1 = map_list (fun x -> x + 1) lst1 in
  let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
  sum_list mapped_lst1 + sum_list mapped_lst2 ;;
//│ [ERROR] Type `int` does not match `string`
//│ 
//│	(int) <--- (?a 0) ~~~~ (?a)  ~~~~ (?c)  ~~~~ (string)
//│ 
//│ ◉ (int) comes from
//│ ▲  - lib. let (^): string -> string -> string
//│ │                  ^^^
//│ │ 
//│ ◉ (?a 0) is assumed for
//│    - l.10   | x :: xs -> x + (sum_list xs) ;;
//│                         ^
//│   ◉ (?a 0 list) comes from
//│      - l.10   | x :: xs -> x + (sum_list xs) ;;
//│                                         ^^
//│     ◉ (?a 0 list -> _) comes from
//│     ▲  - l.10   | x :: xs -> x + (sum_list xs) ;;
//│    │                             ^^^^^^^^
//│     │  - l.7  let rec sum_list lst =
//│    │                 ^^^^^^^^
//│     │ 
//│     ◉ (?sum _list) is assumed for
//│     │  - l.7  let rec sum_list lst =
//│    │                 ^^^^^^^^
//│     ▼ 
//│     ◉ (?g  -> _) comes from
//│        - l.15   sum_list mapped_lst1 + sum_list mapped_lst2 ;;
//│                                       ^^^^^^^^
//│   ◉ (?g)  is assumed for
//│      - l.15   sum_list mapped_lst1 + sum_list mapped_lst2 ;;
//│                                              ^^^^^^^^^^^
//│      - l.14   let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?g) comes from
//│     ▲  - l.14   let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
//│    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?h)  is assumed for
//│        - l.14   let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
//│                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ ((_ -> string) -> ?h) comes from
//│       ▲  - l.14   let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
//│      │                             ^^^^^^^^
//│       │  - l.2  let rec map_list f lst =
//│      │                 ^^^^^^^^
//│       │ 
//│       ◉ (?map _list) is assumed for
//│       │  - l.2  let rec map_list f lst =
//│      │                 ^^^^^^^^
//│       ▼ 
//│       ◉ (?f  -> ?b) comes from
//│          - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│                                         ^^^^^^^^
//│     ◉ (?b)  is assumed for
//│     │  - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│    │                                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ list -> ?d) comes from
//│        - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│                                       ^^^^^^^^^^
//│   ◉ (?d)  is assumed for
//│      - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│                                    ^^^^^^^^^^^^^^^
//│     ◉ (_ list -> ?d) comes from
//│     ▲  - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│    │                                  ^^^^^^^^^^
//│     │ 
//│     ◉ (?b)  is assumed for
//│        - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│                                       ^^^^^^^^^^
//│       ◉ (?f  -> ?b) comes from
//│       ▲  - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│      │                                  ^^^^^^^^
//│       │  - l.2  let rec map_list f lst =
//│      │                 ^^^^^^^^
//│       │ 
//│       ◉ (?map _list) is assumed for
//│       │  - l.2  let rec map_list f lst =
//│      │                 ^^^^^^^^
//│       ▼ 
//│       ◉ ((_ -> string) -> ?h) comes from
//│          - l.14   let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
//│                                    ^^^^^^^^
//│     ◉ (?h)  is assumed for
//│        - l.14   let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
//│                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ ((_ -> string) -> ?h) comes from
//│       ▲  - l.14   let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
//│      │                             ^^^^^^^^
//│       │  - l.2  let rec map_list f lst =
//│      │                 ^^^^^^^^
//│       │ 
//│       ◉ (?map _list) is assumed for
//│       ▲  - l.2  let rec map_list f lst =
//│      │                 ^^^^^^^^
//│       │ 
//│       ◉ (?f  -> _ -> ?e) comes from
//│          - l.2  let rec map_list f lst =
//│                                 ^^^^^^^
//│	match lst with ...
//│                   ^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?e) comes from
//│        - l.2  let rec map_list f lst =
//│                                 ^^^^^
//│	match lst with ...
//│                 ^^^^^^^^^^^^^^^^^^
//│   ◉ (?e)  is assumed for
//│      - l.3    match lst with
//│              ^^^^^^^^^^^^^^
//│	| [] -> [] ...
//│               ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?e) comes from
//│        - l.2  let rec map_list f lst =
//│                                 ^^^^^
//│	match lst with ...
//│                 ^^^^^^^^^^^^^^^^^^
//│       ◉ (?f  -> _ -> ?e) comes from
//│       │  - l.2  let rec map_list f lst =
//│      │                          ^^^^^^^
//│       │           match lst with ...
//│       │           ^^^^^^^^^^^^^^^^^^
//│       │  - l.2  let rec map_list f lst =
//│      │                 ^^^^^^^^
//│       ▼ 
//│       ◉ (?map _list) is assumed for
//│       │  - l.2  let rec map_list f lst =
//│      │                 ^^^^^^^^
//│       ▼ 
//│       ◉ ((_ -> string) -> ?h) comes from
//│          - l.14   let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
//│                                    ^^^^^^^^
//│     ◉ (?h)  is assumed for
//│        - l.14   let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
//│                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ ((_ -> string) -> ?h) comes from
//│       ▲  - l.14   let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
//│      │                             ^^^^^^^^
//│       │  - l.2  let rec map_list f lst =
//│      │                 ^^^^^^^^
//│       │ 
//│       ◉ (?map _list) is assumed for
//│       │  - l.2  let rec map_list f lst =
//│      │                 ^^^^^^^^
//│       ▼ 
//│       ◉ (?f  -> ?b) comes from
//│          - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│                                         ^^^^^^^^
//│     ◉ (?b)  is assumed for
//│     │  - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│    │                                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ list -> ?d) comes from
//│        - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│                                       ^^^^^^^^^^
//│   ◉ (?d)  is assumed for
//│      - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│                                    ^^^^^^^^^^^^^^^
//│     ◉ (_ list -> ?d) comes from
//│     ▲  - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│    │                                  ^^^^^^^^^^
//│     │ 
//│     ◉ (?b)  is assumed for
//│        - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│                                       ^^^^^^^^^^
//│       ◉ (?f  -> ?b) comes from
//│       ▲  - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│      │                                  ^^^^^^^^
//│       │  - l.2  let rec map_list f lst =
//│      │                 ^^^^^^^^
//│       │ 
//│       ◉ (?map _list) is assumed for
//│       ▲  - l.2  let rec map_list f lst =
//│      │                 ^^^^^^^^
//│       │ 
//│       ◉ (?f  -> _ -> ?e) comes from
//│          - l.2  let rec map_list f lst =
//│                                 ^^^^^^^
//│	match lst with ...
//│                   ^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?e) comes from
//│        - l.2  let rec map_list f lst =
//│                                 ^^^^^
//│	match lst with ...
//│                 ^^^^^^^^^^^^^^^^^^
//│   ◉ (?e)  is assumed for
//│   ▲  - l.3    match lst with
//│  │           ^^^^^^^^^^^^^^
//│   │           | [] -> [] ...
//│   │           ^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a  list) comes from
//│      - l.4    | [] -> []
//│                      ^^
//│ ◉ (?a)  is assumed for
//│   ◉ (?a  list) comes from
//│   │  - l.4    | [] -> []
//│  │                   ^^
//│   │  - l.3    match lst with
//│  │           ^^^^^^^^^^^^^^
//│   │           | [] -> [] ...
//│   │           ^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e)  is assumed for
//│   ▲  - l.3    match lst with
//│  │           ^^^^^^^^^^^^^^
//│   │           | [] -> [] ...
//│   │           ^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c  list) comes from
//│      - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│                           ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c)  is assumed for
//│    - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│                         ^^^^^
//│   ◉ (_ -> ?c) comes from
//│   ▲  - l.5    | x :: xs -> (f x) :: (map_list f xs) ;;
//│  │                         ^
//│   │ 
//│   ◉ (?f)  is assumed for
//│      - l.2  let rec map_list f lst =
//│                             ^
//│     ◉ (?f  -> _ -> ?e) comes from
//│     │  - l.2  let rec map_list f lst =
//│    │                          ^^^^^^^
//│     │           match lst with ...
//│     │           ^^^^^^^^^^^^^^^^^^
//│     │  - l.2  let rec map_list f lst =
//│    │                 ^^^^^^^^
//│     ▼ 
//│     ◉ (?map _list) is assumed for
//│     │  - l.2  let rec map_list f lst =
//│    │                 ^^^^^^^^
//│     ▼ 
//│     ◉ ((_ -> string) -> ?h) comes from
//│        - l.14   let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
//│                                  ^^^^^^^^
//│   ◉ (_ -> string) comes from
//│      - l.14   let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
//│                                         ^^^^^^^^^^^^^^^^^^
//│ ◉ (string) comes from
//│    - l.14   let mapped_lst2 = map_list (fun x -> x ^ "!") lst2 in
//│                                                 ^^^^^^^
//│    - lib. let failwith: string -> 'a
//│                                        ^^^^^^
//│ process_lists: list['a] -> list['a0] -> int
//│ U max: 7, total: 151
//│ UERR 1 errors
//│ L: 3 [int ~ string, int :> 'a93', ['a93' - list['a93'] ~ list['a77'] - 'a77', L: 2 [list['a93'] ~ list['a77'], [list['a93'] - ([list['a93']] -> α95') ~ ([α84'] -> α96') - α84', L: 0 [([list['a93']] -> α95') ~ ([α84'] -> α96'), ([list['a93']] -> α95') :> sum_list91', sum_list91' <: ([α84'] -> α96')]], [α84' - ([α60'] -> α84') ~ ([list['a75']] -> α79') - α79', L: 1 [([α60'] -> α84') ~ ([list['a75']] -> α79'), ([α60'] -> α84') :> α83', [α83' - ((α82' -> [string]) -> α83') ~ ([α74'] -> α81') - α81', L: 0 [((α82' -> [string]) -> α83') ~ ([α74'] -> α81'), ((α82' -> [string]) -> α83') :> map_list73', map_list73' <: ([α74'] -> α81')]], α81' <: ([list['a75']] -> α79')]], [α79' - ([list['a75']] -> α79') ~ (α80' -> α78') - α78', L: 1 [([list['a75']] -> α79') ~ (α80' -> α78'), ([list['a75']] -> α79') :> α81', [α81' - ([α74'] -> α81') ~ ((α82' -> [string]) -> α83') - α83', L: 0 [([α74'] -> α81') ~ ((α82' -> [string]) -> α83'), ([α74'] -> α81') :> map_list73', map_list73' <: ((α82' -> [string]) -> α83')]], [α83' - ((α82' -> [string]) -> α83') ~ (α74' -> (α80' -> α78')) - (α80' -> α78'), L: 0 [((α82' -> [string]) -> α83') ~ (α74' -> (α80' -> α78')), ((α82' -> [string]) -> α83') :> map_list73', map_list73' :> (α74' -> (α80' -> α78'))]]]], [α78' - (α80' -> α78') ~ ([list['a75']] -> α79') - α79', L: 1 [(α80' -> α78') ~ ([list['a75']] -> α79'), [(α80' -> α78') - (α74' -> (α80' -> α78')) ~ ((α82' -> [string]) -> α83') - α83', L: 0 [(α74' -> (α80' -> α78')) ~ ((α82' -> [string]) -> α83'), (α74' -> (α80' -> α78')) <: map_list73', map_list73' <: ((α82' -> [string]) -> α83')]], [α83' - ((α82' -> [string]) -> α83') ~ ([α74'] -> α81') - α81', L: 0 [((α82' -> [string]) -> α83') ~ ([α74'] -> α81'), ((α82' -> [string]) -> α83') :> map_list73', map_list73' <: ([α74'] -> α81')]], α81' <: ([list['a75']] -> α79')]], [α79' - ([list['a75']] -> α79') ~ (α80' -> α78') - α78', L: 1 [([list['a75']] -> α79') ~ (α80' -> α78'), ([list['a75']] -> α79') :> α81', [α81' - ([α74'] -> α81') ~ (α74' -> (α80' -> α78')) - (α80' -> α78'), L: 0 [([α74'] -> α81') ~ (α74' -> (α80' -> α78')), ([α74'] -> α81') :> map_list73', map_list73' :> (α74' -> (α80' -> α78'))]]]], α78' :> list['a77']]], ['a77' - list['a77'] ~ list[α76'] - α76', L: 0 [list['a77'] ~ list[α76'], list['a77'] <: α78', α78' :> list[α76']]], [α76' - (['a75'] -> α76') ~ (α82' -> [string]) - string, L: 1 [(['a75'] -> α76') ~ (α82' -> [string]), (['a75'] -> α76') :> α74', [α74' - (α74' -> (α80' -> α78')) ~ ((α82' -> [string]) -> α83') - (α82' -> [string]), L: 0 [(α74' -> (α80' -> α78')) ~ ((α82' -> [string]) -> α83'), (α74' -> (α80' -> α78')) <: map_list73', map_list73' <: ((α82' -> [string]) -> α83')]]]]]

let main () =
  let int_list = [1; 2; 3] in
  let string_list = ["a"; "b"; "c"] in
  process_lists int_list string_list ;;
//│ main: () -> int 