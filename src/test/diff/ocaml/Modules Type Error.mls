(*This benchmark tests the algorithm's ability to handle modules and detect a type error when a module function is applied to arguments of an incompatible type*)

module IntUtils = struct
  let add x y = x + y
end ;;
//│ [ERROR] Type `err` does not match `err -> _`
//│ 
//│	(err) ---> (err -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.3  module IntUtils = struct
//││         ^^^^^^
//│ ▼ 
//│ ◉ (err -> _) comes from
//│    - l.3  module IntUtils = struct
//│          ^^^^^^
//│ ╔══[ERROR] identifier not found: module
//│ ║  
//│ ║  l.3:	module IntUtils = struct
//│ ╙──    	^^^^^^
//│ ╔══[ERROR] identifier not found: IntUtils
//│ ║  
//│ ║  l.3:	module IntUtils = struct
//│ ╙──    	       ^^^^^^^^
//│ ╔══[ERROR] identifier not found: struct
//│ ║  
//│ ║  l.3:	module IntUtils = struct
//│ ╙──    	                  ^^^^^^
//│ res: bool
//│ add: int -> int -> int
//│ ╔══[ERROR] identifier not found: end
//│ ║  
//│ ║  l.5:	end ;;
//│ ╙──    	^^^
//│ res: err
//│ U max: 1, total: 6
//│ UERR 1 errors
//│ L: 0 [err ~ ([err] -> α43), err <: ([err] -> α43)]

module StringUtils = struct
  let concat x y = x ^ y
end ;;
//│ [ERROR] Type `err` does not match `err -> _`
//│ 
//│	(err) ---> (err -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.7  module StringUtils = struct
//││         ^^^^^^
//│ ▼ 
//│ ◉ (err -> _) comes from
//│    - l.7  module StringUtils = struct
//│          ^^^^^^
//│ ╔══[ERROR] identifier not found: module
//│ ║  
//│ ║  l.7:	module StringUtils = struct
//│ ╙──    	^^^^^^
//│ ╔══[ERROR] identifier not found: StringUtils
//│ ║  
//│ ║  l.7:	module StringUtils = struct
//│ ╙──    	       ^^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: struct
//│ ║  
//│ ║  l.7:	module StringUtils = struct
//│ ╙──    	                     ^^^^^^
//│ res: bool
//│ concat: string -> string -> string
//│ ╔══[ERROR] identifier not found: end
//│ ║  
//│ ║  l.9:	end ;;
//│ ╙──    	^^^
//│ res: err
//│ U max: 1, total: 6
//│ UERR 1 errors
//│ L: 0 [err ~ ([err] -> α47), err <: ([err] -> α47)]

let main () =
  let add = IntUtils.add in
  add "hello" "world" ;;
//│ [ERROR] Type `err` does not match `string -> _`
//│ 
//│	(err) ---> (string -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.12   let add = IntUtils.add in
//││                     ^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (string -> _) comes from
//│    - l.13   add "hello" "world" ;;
//│            ^^^
//│ ╔══[ERROR] identifier not found: IntUtils.add
//│ ║  
//│ ║  l.12:	  let add = IntUtils.add in
//│ ╙──     	            ^^^^^^^^^^^^
//│ main: () -> 'a
//│ U max: 1, total: 2
//│ UERR 1 errors
//│ L: 0 [err ~ ([string] -> α50'), err <: ([string] -> α50')] 