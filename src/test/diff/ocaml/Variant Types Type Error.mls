(*This benchmark tests the algorithm's ability to handle variant types and detect a type error when an incompatible type is used in the construction or pattern matching of a variant type*)

type 'a expr =
   Const of int
  | Add of 'a expr * 'a expr
  | Bool of bool;;
//│ Defined type alias expr[±'a]
//│ Defined class Const
//│ Defined class Add[±'a]
//│ Defined class Bool
//│ ╔══[WARNING] Type definition expr has bivariant type parameters:
//│ ║  
//│ ║  l.3:	type 'a expr =
//│ ╟── 'a is irrelevant and may be removed
//│ ║  l.3:	type 'a expr =
//│ ╔══[WARNING] Type definition Add has bivariant type parameters:
//│ ║  
//│ ║  l.5:	  | Add of 'a expr * 'a expr
//│ ╟── 'a is irrelevant and may be removed
//│ ║  l.5:	  | Add of 'a expr * 'a expr
//│ Const: int -> expr[anything]
//│ Add: (expr[anything], expr[anything],) -> expr[anything]
//│ Bool: bool -> expr[anything]

let rec eval expr =
  match expr with
  | Const n -> n
  | Add (e1, e2) -> eval e1 + eval e2
  | Bool b -> if b then 1 else 0 ;;
//│ eval: expr[anything] -> int

let main () = eval (Add (Const 1, Bool 2)) ;;
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│	(int) ---> (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - l.14 let main () = eval (Add (Const 1, Bool 2)) ;;
//│ ▼ 
//│ ◉ (bool) comes from
//│    - l.6    | Bool of bool;;
//│ main: () -> int
//│ U max: 5, total: 24
//│ UERR 1 errors
//│ L: 0 [int ~ bool, int <: bool] 