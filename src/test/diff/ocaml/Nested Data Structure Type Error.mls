(*This benchmark tests the algorithm's ability to handle nested data structures (in this case, a binary tree) and detect a type error when an incompatible type is used in the construction of the data structure.*)
type 'a tree = Leaf of 'a | Node of 'a tree * 'a * 'a tree ;;
//│ Defined type alias tree[+'a]
//│ Defined class Leaf[+'a]
//│ Defined class Node[+'a]
//│ Leaf: 'a -> tree['a]
//│ Node: (tree['a], 'a, tree['a],) -> tree['a]

let max a b = if a > b then a else b ;;
let rec depth tree =
  match tree with
  | Leaf x -> 1
  | Node (left, x , right) -> 1 + max (depth left) (depth right) ;;
//│ max: 'a -> 'b -> 'b
//│ depth: tree['a] -> int

let main () = depth (Node (Leaf 1, true, Leaf 2)) ;;
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│	(int) ---> (?b)  ~~~~ (?a)  ~~~~ (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - l.10 let main () = depth (Node (Leaf 1, true, Leaf 2)) ;;
//│ ▼ 
//│ ◉ (?b)  is assumed for
//│    - l.10 let main () = depth (Node (Leaf 1, true, Leaf 2)) ;;
//│   ◉ (?b  tree) comes from
//│      - l.10 let main () = depth (Node (Leaf 1, true, Leaf 2)) ;;
//│      - l.2  type 'a tree = Leaf of 'a | Node of 'a tree * 'a * 'a tree ;;
//│     ◉ (?b  tree * bool * _ tree) comes from
//│     │  - l.10 let main () = depth (Node (Leaf 1, true, Leaf 2)) ;;
//│     ▼ 
//│     ◉ (?a  tree * ?a * ?a tree) comes from
//│        - l.2  type 'a tree = Leaf of 'a | Node of 'a tree * 'a * 'a tree ;;
//│   ◉ (?a  tree) comes from
//│      - l.2  type 'a tree = Leaf of 'a | Node of 'a tree * 'a * 'a tree ;;
//│ ◉ (?a)  is assumed for
//│   ◉ (?a  tree * ?a * ?a tree) comes from
//│   ▲  - l.2  type 'a tree = Leaf of 'a | Node of 'a tree * 'a * 'a tree ;;
//│   │ 
//│   ◉ (?b  tree * bool * _ tree) comes from
//│      - l.10 let main () = depth (Node (Leaf 1, true, Leaf 2)) ;;
//│ ◉ (bool) comes from
//│    - l.10 let main () = depth (Node (Leaf 1, true, Leaf 2)) ;;
//│ main: () -> int
//│ U max: 8, total: 36
//│ UERR 1 errors
//│ L: 2 [int ~ bool, int <: α75', [α75' - tree[α75'] ~ tree[α74'] - α74', L: 1 [tree[α75'] ~ tree[α74'], [tree[α75'] - ([[tree[α75']]], [[bool]], [[tree[α76']]],) ~ ([tree[α74']], [α74'], [tree[α74']],) - tree[α74'], L: 0 [([[tree[α75']]], [[bool]], [[tree[α76']]],) ~ ([tree[α74']], [α74'], [tree[α74']],), ([[tree[α75']]], [[bool]], [[tree[α76']]],) <: ([tree[α74']], [α74'], [tree[α74']],)]]]], [α74' - ([tree[α74']], [α74'], [tree[α74']],) ~ ([[tree[α75']]], [[bool]], [[tree[α76']]],) - bool, L: 0 [([tree[α74']], [α74'], [tree[α74']],) ~ ([[tree[α75']]], [[bool]], [[tree[α76']]],), ([tree[α74']], [α74'], [tree[α74']],) :> ([[tree[α75']]], [[bool]], [[tree[α76']]],)]]]