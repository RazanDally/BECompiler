(*This benchmark tests the algorithm's ability to handle Generalized Algebraic Data Types (GADTs) and detect a type error when an incompatible type is used in the construction or pattern matching of a GADT.*)

type _ term =
  | Const : int -> int term
  | Add : int term * int term -> int term
  | Bool : bool -> bool term ;;
//│ /!\ Parse error: Expected "=":1:8, found "term =\n  |" at l.3:8: type _ term =

let eval t =
  match t with
  | Const n -> n
  | Add (t1, t2) -> eval t1 + eval t2
  | Bool b -> if b then 1 else 0 ;;
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: Const does not have adt data
//│ 	at: hmloc.utils.package$.lastWords(package.scala:185)
//│ 	at: hmloc.Typer.$anonfun$typeTerm$31(Typer.scala:517)
//│ 	at: scala.Option.getOrElse(Option.scala:201)
//│ 	at: hmloc.Typer.$anonfun$typeTerm$9(Typer.scala:517)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)
//│ 	at: hmloc.Typer.$anonfun$typeTerm$2(Typer.scala:440)
//│ 	at: hmloc.TyperHelpers.trace(TyperHelpers.scala:23)
//│ 	at: hmloc.Typer.typeTerm(Typer.scala:597)
//│ 	at: hmloc.Typer.$anonfun$typeTerm$2(Typer.scala:373)
//│ 	at: hmloc.TyperHelpers.trace(TyperHelpers.scala:23)

let main () = eval (Add (Const 1, Bool true)) ;;
//│ [ERROR] Type `err` does not match `(_ * _) -> _`
//│ 
//│	(err) ---> ((_ * _) -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.14 let main () = eval (Add (Const 1, Bool true)) ;;
//││                             ^^^
//│ ▼ 
//│ ◉ ((_ * _) -> _) comes from
//│    - l.14 let main () = eval (Add (Const 1, Bool true)) ;;
//│                              ^^^
//│ [ERROR] Type `err` does not match `bool -> _`
//│ 
//│	(err) ---> (bool -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.14 let main () = eval (Add (Const 1, Bool true)) ;;
//││                                           ^^^^
//│ ▼ 
//│ ◉ (bool -> _) comes from
//│    - l.14 let main () = eval (Add (Const 1, Bool true)) ;;
//│                                            ^^^^
//│ [ERROR] Type `err` does not match `int -> _`
//│ 
//│	(err) ---> (int -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.14 let main () = eval (Add (Const 1, Bool true)) ;;
//││                                  ^^^^^
//│ ▼ 
//│ ◉ (int -> _) comes from
//│    - l.14 let main () = eval (Add (Const 1, Bool true)) ;;
//│                                   ^^^^^
//│ [ERROR] Type `err` does not match `_ -> _`
//│ 
//│	(err) ---> (_ -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.14 let main () = eval (Add (Const 1, Bool true)) ;;
//││                       ^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.14 let main () = eval (Add (Const 1, Bool true)) ;;
//│                        ^^^^
//│ ╔══[ERROR] identifier not found: eval
//│ ║  
//│ ║  l.14:	let main () = eval (Add (Const 1, Bool true)) ;;
//│ ╙──     	              ^^^^
//│ ╔══[ERROR] identifier not found: Add
//│ ║  
//│ ║  l.14:	let main () = eval (Add (Const 1, Bool true)) ;;
//│ ╙──     	                    ^^^
//│ ╔══[ERROR] identifier not found: Const
//│ ║  
//│ ║  l.14:	let main () = eval (Add (Const 1, Bool true)) ;;
//│ ╙──     	                         ^^^^^
//│ ╔══[ERROR] identifier not found: Bool
//│ ║  
//│ ║  l.14:	let main () = eval (Add (Const 1, Bool true)) ;;
//│ ╙──     	                                  ^^^^
//│ main: () -> 'a
//│ U max: 1, total: 4
//│ UERR 4 errors
//│ L: 0 [err ~ ([int] -> α44'), err <: ([int] -> α44')]
//│ L: 0 [err ~ (([α44'], [α45'],) -> α46'), err <: (([α44'], [α45'],) -> α46')]
//│ L: 0 [err ~ ([bool] -> α45'), err <: ([bool] -> α45')]
//│ L: 0 [err ~ (α46' -> α47'), err <: (α46' -> α47')] 