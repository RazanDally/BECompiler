(*This benchmark tests the algorithm's ability to handle Generalized Algebraic Data Types (GADTs) and detect a type error when an incompatible type is used in the construction or pattern matching of a GADT.*)

type 'a term =
   Const of (int -> int)
  | Add of 'a term * 'a term
  | Bool of (bool -> bool) ;;
//│ Defined type alias term[±'a]
//│ Defined class Const
//│ Defined class Add[±'a]
//│ Defined class Bool
//│ ╔══[WARNING] Type definition Add has bivariant type parameters:
//│ ║  
//│ ║  l.5:	  | Add of 'a term * 'a term
//│ ║      	    ^^^
//│ ╟── 'a is irrelevant and may be removed
//│ ║  l.5:	  | Add of 'a term * 'a term
//│ ╙──    	           ^^
//│ ╔══[WARNING] Type definition term has bivariant type parameters:
//│ ║  
//│ ║  l.3:	type 'a term =
//│ ║      	        ^^^^
//│ ╟── 'a is irrelevant and may be removed
//│ ║  l.3:	type 'a term =
//│ ╙──    	     ^^
//│ Const: (int -> int) -> term[anything]
//│ Add: (term[anything], term[anything],) -> term[anything]
//│ Bool: (bool -> bool) -> term[anything]

let f (x:int) = x;;
//│ f: int -> int

let ff (x:int) = x - 1;;
//│ ff: int -> int

let bb (x:bool) = x;;
let rec eval t =
  match t with
  | Const n -> n
  | Add (t1 , t2) -> eval (Const f)
  | Bool b -> if b (true) then eval (Const f) else eval (Const ff) ;;
//│ bb: bool -> bool
//│ eval: term[anything] -> int -> int

let main () = eval (Add(Bool ff, Const bb));;
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ~~~~ (bool)
//│ 
//│ ◉ (int) comes from
//│    - l.-11let ff (x:int) = x - 1;;
//│                     ^^^
//│   ◉ (int -> int) comes from
//│   │  - l.-11let ff (x:int) = x - 1;;
//│   │                ^^^^^^^^^^^^^^^
//│   │  - l.1  let main () = eval (Add(Bool ff, Const bb));;
//│   │                                      ^^
//│   ▼ 
//│   ◉ (bool -> bool) comes from
//│      - l.-37  | Bool of (bool -> bool) ;;
//│                          ^^^^^^^^^^^^
//│ ◉ (bool) comes from
//│    - l.-37  | Bool of (bool -> bool) ;;
//│                        ^^^^
//│ main: () -> int -> int
//│ U max: 9, total: 36
//│ UERR 1 errors
//│ L: 1 [int ~ bool, [int - (int -> [int]) ~ (bool -> bool) - bool, L: 0 [(int -> [int]) ~ (bool -> bool), (int -> [int]) <: (bool -> bool)]]]
//│	(int) ~~~~ (bool)
